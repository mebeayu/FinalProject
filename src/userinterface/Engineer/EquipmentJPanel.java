/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Engineer;

import Business.Logic.EngDic;
import Business.Logic.RecDic;
import Business.Models.Equipment;
import java.awt.CardLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.MainJFrame;

/**
 *
 * @author 27246
 */
public class EquipmentJPanel extends javax.swing.JPanel {

    byte[] Image;
    JPanel container;
    String Enterprise;
    List<Equipment> listEquipment;
    /**
     * Creates new form EquipmentJPanel
     */
    public EquipmentJPanel(JPanel container) {
        initComponents();
        this.container = container;
        Enterprise =  MainJFrame.userAccount.Enterprise.getName();
        this.labImg.setSize(100, 100);
        LoadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void LoadData(){
        listEquipment = EngDic.QueryEquipment(Enterprise);
        DefaultTableModel tableModel = (DefaultTableModel)this.tableEquipment.getModel();
        String[] cols = new String[]{"EquipmentID","Equipment Name","Enterprise"};
        String[][] rows= new String[listEquipment.size()][3];
        for (int i = 0; i < listEquipment.size(); i++) {
            rows[i][0] = listEquipment.get(i).EquipmentID;
            rows[i][1] = listEquipment.get(i).EquipmentName;
            rows[i][2] = listEquipment.get(i).Enterprise;
        }
        tableModel.setDataVector(rows, cols);
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableEquipment = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtEquipment = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        labImg = new javax.swing.JLabel();

        tableEquipment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableEquipment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableEquipmentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableEquipment);

        jLabel1.setText("Equipment Name");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        labImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labImgMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labImg, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDel)
                                .addGap(10, 10, 10))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labImg, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(btnDel))
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);  
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        EngDic.AddEquipment(this.txtEquipment.getText(), Enterprise,this.Image);
        LoadData();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        int n = this.tableEquipment.getSelectedRow();
        if(n<0) return;
        String id = this.tableEquipment.getValueAt(n, 0).toString();
        EngDic.DelEquipment(id);
        LoadData();
    }//GEN-LAST:event_btnDelActionPerformed

    private void labImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labImgMouseClicked
 
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getAbsoluteFile().toString();
            System.out.println(path);
            File f = new File(path);           
            BufferedImage bi; 
            try{
                bi = ImageIO.read(f); 
               
                ByteArrayOutputStream baos = new ByteArrayOutputStream();    
                ImageIO.write(bi, "jpg", baos);    
                byte[] bytes = baos.toByteArray(); 
                
                ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
                Iterator<?> readers = ImageIO.getImageReadersByFormatName( "jpg" );
                ImageReader reader = (ImageReader) readers.next();
                Object source = bis;
                ImageInputStream iis = ImageIO.createImageInputStream(source);
                reader.setInput(iis, true );
                ImageReadParam param = reader.getDefaultReadParam();
                Image image = reader.read( 0 , param);
                
                ImageIcon pic1 = new ImageIcon(image);
                pic1.setImage(pic1.getImage().getScaledInstance(200,200,0));
                this.labImg.setIcon(pic1);
                this.Image = bytes;
                
            }
            catch(IOException ex){
                
            }
            
            
            
        }
    }//GEN-LAST:event_labImgMouseClicked

    private void tableEquipmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEquipmentMouseClicked
        int n = this.tableEquipment.getSelectedRow();
        if(n<0) return;
        Equipment e = this.listEquipment.get(n);
        if(e.Image!=null){
            try{
                byte[] bytes = e.Image;
                ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
                Iterator<?> readers = ImageIO.getImageReadersByFormatName( "jpg" );
                ImageReader reader = (ImageReader) readers.next();
                Object source = bis;
                ImageInputStream iis = ImageIO.createImageInputStream(source);
                reader.setInput(iis, true );
                ImageReadParam param = reader.getDefaultReadParam();
                Image image = reader.read( 0 , param);
                
                ImageIcon pic1 = new ImageIcon(image);
                pic1.setImage(pic1.getImage().getScaledInstance(200,200,0));
                this.labImg.setIcon(pic1);
                this.Image = bytes;
            }
            catch(IOException ex){}
        }
        else{
            this.Image = null;
            this.labImg.setIcon(null);
        }
    }//GEN-LAST:event_tableEquipmentMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labImg;
    private javax.swing.JTable tableEquipment;
    private javax.swing.JTextField txtEquipment;
    // End of variables declaration//GEN-END:variables
}
